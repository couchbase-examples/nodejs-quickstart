openapi: 3.0.0
info:
  title: Profile Store API
  description: Simple Profile Store API built with NodeJS, Express, Babel, and Couchbase
  version: 0.1.0
tags:
  - name: profile
    description: KV operations for a singular User Profile
  - name: profiles
    description: Query for searching User Profiles
paths:
  /profile:
    post:
      tags:
        - profile
      summary: Post a User Profile
      description: Post a User Profile
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileCreatedResponse'
        '500':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutProfileBadResponse'
  /profile/{pid}:
    get:
      tags:
        - profile
      summary: Returns a single User Profile
      description: The R (singluar) in CRUD
      parameters:
        - name: pid
          in: path
          description: ID of User Profile to return
          required: true
          schema:
            type:  string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileBasic'
        '500':
          description: KV Operation Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileDocumentNotFound'
    put:
      tags:
        - profile
      summary: Update a user Profile
      description: The U in CRUD
      parameters:
        - name: pid
          in: path
          required: true
          description: Profile ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUpdateResponse'
        '500':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutProfileDocumentNotFound'
    delete:
      tags:
        - profile
      summary: Delete Profile
      description: Delete a single User Profile
      parameters:
        - name: pid
          in: path
          required: true
          description: Profile ID
          schema:
            type : string
      responses:
        '200':
          description: OK
        '500':
          description: Delete Failed
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DeleteProfileDocumentNotFound'
  /profiles:
    get:
      tags:
        - profiles
      summary: Searches profiles by 'firstName'
      description: The R in CRUD
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
          description: The numbers of items to offset
          example: 0
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
          example: 1
        - in: query
          name: search
          schema:
            type: string
          description: The text to search first and last name
          example: jo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ArrayOfProfiles'
        '500':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfilesDocumentNotFound'
components:
  schemas:
    ProfileRequest:
      required:
        - email
        - pass
      type: object
      properties:
        email:
          type: string
          example: johndohz@couchbase.com
        pass:
          type: string
          example: p455w3rd
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Dohz
    ProfileBasic:
      properties: 
        pid:
          type: string
          example: '123456eb-1a2b-3c45-defg-67dhi89j0kl1'
        email:
          type: string
          example: 'johndoh@couchbase.com'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Dohz'
        pass:
          type: string
          example: '$h45h3d5tr1n6!'
    ProfileCreatedResponse:
      properties:
        pid:
          type: string
          example: '123456eb-1a2b-3c45-defg-67dhi89j0kl1'
        email:
          type: string
          example: 'johndoh@couchbase.com'
        pass:
          type: string
          example: '$h45h3d5tr1n6!'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Dohz'
        cas:
          type: string
          example: '1621568977675026432'
        token:
          type: string
          example: '123456eb-1a2b-3c45-defg-67dhi89j0kl1'
    ProfileUpdateResponse:
      properties:
        pid:
          type: string
          example: '123456eb-1a2b-3c45-defg-67dhi89j0kl1'
        email:
          type: string
          example: 'johndoh@couchbase.com'
        pass:
          type: string
          example: '$h45h3d5tr1n6!'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Dohz'
        cas:
          type: string
          example: '1621568977675026432'
        token:
          type: string
          example: '123456eb-1a2b-3c45-defg-67dhi89j0kl1'
    ArrayOfProfiles:
      type: array
      items:
        type: object
        properties:
          pid:
            type: string
          email:
            type: string
          pass:
            type: string
            example: 
          firstName:
            type: string
          lastName:
            type: string
            example: 
      example:
        - pid: '123456eb-1a2b-3c45-defg-67dhi89j0kl1'
          email: 'johndohz@couchbase.com'
          pass: '$h45h3d5tr1n6!'
          firstname: 'John'
          lastName: 'Dohz'
    GetProfileDocumentNotFound:
      properties:
        message:
          type: string
          example: 'KV Operation Failed: document not found'
    PutProfileBadResponse:
      properties:
        message:
          type: string
          example: 'email and pass are required'
    PutProfileDocumentNotFound:
      properties:
        message:
          type: string
          example: 'Profile Not Found, cannot update: 123456eb-1a2b-3c45-defg-67dhi89j0kl1'
    DeleteProfileDocumentNotFound:
      properties:
        message:
          type: string
          example: 'Profile Not Found, cannot update: 123456eb-1a2b-3c45-defg-67dhi89j0kl1'
    GetProfilesDocumentNotFound:
      properties:
        message:
          type: string
          example: 'Query Failed: {Error Message}'
